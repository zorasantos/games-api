name: Game Api
on:
  push:
    branches: [main, develop, staging]
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Run eslint
      run: yarn lint

    - name: Run test
      run: yarn test --coverage

    # - name: Test Report
    #   uses: dorny/test-reporter@v1
    #   if: success() || failure()
    #   with:
    #     name: Test Results
    #     path: ${{ github.workspace }}/reports/test-results
    #     reporter: jest-junit

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy-dev:
    name: Deploy Develop
    runs-on: ubuntu-latest
    environment:
      name: develop
    needs: [build, sonarcloud]
    steps:
      - run: echo "Deployment develop"

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
    needs: [build, sonarcloud, deploy-dev]
    steps:
      - run: echo "Deployment staging"

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    environment:
      name: production
    needs: [build, sonarcloud, deploy-dev, deploy-staging]
    steps:
      - run: echo "Deployment production"